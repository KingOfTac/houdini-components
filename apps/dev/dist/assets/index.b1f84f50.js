import{D as F,c as A,d as H,h as R,F as _,a as u,S as V,M as G,b as y,e as f,p as E,n as W,P as I,f as X,g as Y,i as z,j as J}from"./vendor.9073e411.js";const K=function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))i(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const g of s.addedNodes)g.tagName==="LINK"&&g.rel==="modulepreload"&&i(g)}).observe(document,{childList:!0,subtree:!0});function n(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerpolicy&&(s.referrerPolicy=r.referrerpolicy),r.crossorigin==="use-credentials"?s.credentials="include":r.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(r){if(r.ep)return;r.ep=!0;const s=n(r);fetch(r.href,s)}};K();var Q="/assets/polygon-worklet.d4bf10c1.js",U="/assets/masonry-worklet.2302683a.js",Z="/assets/quadtree-worklet.baa188df.js";function v(e,o){const n={};return o.forEach(i=>n[i[0]]=F.create(`${e}-${i[0]}`).withDefault(i[1])),n}const ee="masonry",te=[["gaps",10],["columns",3]],p=v(ee,te),oe="quadtree",ne=[["points",100],["gaps",5],["maxObjects",8],["maxLevels",8]],d=v(oe,ne),re="polygon",ae=[["color","#000"],["sides",3],["rotation",0],["radius",0],["rounded",!1],["scale",1],["shadow",JSON.stringify([])],["moveto",[0,0]]],t=v(re,ae),se=A`
	${H("inline-block")} :host {
		${t.color};
		${t.sides};
		${t.rotation};
		${t.radius};
		${t.rounded};
		${t.scale};
		${t.shadow};
		${t.moveto};

		background-image: paint(polygon);
		padding: calc(var(--polygon-scale) * 1px);
		transform: translate(var(--polygon-moveto));
	}
`,ie=R`
	<template>
		<slot></slot>
	</template>
`;var le=Object.defineProperty,ue=Object.getOwnPropertyDescriptor,c=(e,o,n,i)=>{for(var r=i>1?void 0:i?ue(o,n):o,s=e.length-1,g;s>=0;s--)(g=e[s])&&(r=(i?g(o,n,r):g(r))||r);return i&&r&&le(o,n,r),r};const de={toView(e){return e.join(",")},fromView(e){return e.split(",").map(o=>`${o.trim()}px`)}};class l extends _{colorChanged(o,n){o!==n&&t.color.setValueFor(this,n)}sidesChanged(o,n){o!==n&&t.sides.setValueFor(this,n)}roundedChanged(o,n){o!==n&&t.rounded.setValueFor(this,n)}radiusChanged(o,n){o!==n&&t.radius.setValueFor(this,n)}rotationChanged(o,n){o!==n&&t.rotation.setValueFor(this,n)}scaleChanged(o,n){o!==n&&t.scale.setValueFor(this,n)}shadowChanged(o,n){o!==n&&t.shadow.setValueFor(this,n)}moveToChanged(o,n){o!==n&&t.moveto.setValueFor(this,n.join(","))}}c([u],l.prototype,"color",2);c([u],l.prototype,"sides",2);c([u({mode:"boolean"})],l.prototype,"rounded",2);c([u],l.prototype,"radius",2);c([u],l.prototype,"rotation",2);c([u],l.prototype,"scale",2);c([u],l.prototype,"shadow",2);c([u({attribute:"move-to",converter:de})],l.prototype,"moveTo",2);const ce=l.compose({baseName:"shape",template:ie,styles:se});function me(){return(navigator.userAgent.indexOf("Opera")||navigator.userAgent.indexOf("OPR"))!=-1?"Opera":navigator.userAgent.indexOf("Chrome")!=-1?"Chrome":navigator.userAgent.indexOf("Safari")!=-1?"Safari":navigator.userAgent.indexOf("Firefox")!=-1?"Firefox":navigator.userAgent.indexOf("MSIE")!=-1||!!document.documentMode?"Internet Explorer":"Not sure!"}const L=me(),a=document.getElementById("shape-1");a.style.backgroundImage="-moz-element(#paint-1-polygon) !important";a.dataset.cssPaint=1 .toString();L!=="Firefox"&&L!=="Chrome"&&(document.getElementById("shapes").innerHTML="Paint worklets using shadow DOM currently only work on chrome canary, edge canary or Firefox");CSS.paintWorklet.addModule(Q);CSS.layoutWorklet?(CSS.layoutWorklet.addModule(U),CSS.layoutWorklet.addModule(Z)):(document.getElementById("masonry").innerHTML="Layout worklets currently only work on chrome canary or edge canary with experimental platform features enabled.",document.getElementById("quadtree").innerHTML="Layout worklets currently only work on chrome canary or edge canary with experimental platform features enabled.");const b=document.getElementById("mode-toggle");b.innerHTML=V;b.addEventListener("change",e=>{e.target.checked?(e.target.innerHTML=G,y.withDefault(f.DarkMode)):(e.target.innerHTML=V,y.withDefault(f.LightMode))});const h=document.getElementById("masonry"),S=document.getElementById("masonry-gaps"),x=document.getElementById("masonry-columns");S.initialValue=p.gaps.getValueFor(h).toString();S.addEventListener("input",e=>{p.gaps.setValueFor(h,Number(e.target.value))});x.initialValue=p.columns.getValueFor(h).toString();x.addEventListener("input",e=>{p.columns.setValueFor(h,Number(e.target.value))});const m=document.getElementById("quadtree"),B=document.getElementById("quadtree-points"),C=document.getElementById("quadtree-gaps"),w=document.getElementById("quadtree-objects"),O=document.getElementById("quadtree-levels");B.initialValue=d.points.getValueFor(m).toString();B.addEventListener("change",e=>{d.points.setValueFor(m,Number(e.target.value))});C.initialValue=d.gaps.getValueFor(m).toString();C.addEventListener("input",e=>{d.gaps.setValueFor(m,Number(e.target.value))});w.initialValue=d.maxObjects.getValueFor(m).toString();w.addEventListener("input",e=>{d.maxObjects.setValueFor(m,Number(e.target.value))});O.initialValue=d.maxLevels.getValueFor(m).toString();O.addEventListener("input",e=>{d.maxLevels.setValueFor(m,Number(e.target.value))});const ge=F.create("random-height"),pe=document.querySelectorAll(".masonry .block");pe.forEach(e=>ge.setValueFor(e,Math.random()*(400-100)+100));const he=E("#181818");W.withDefault(I.from(he));const ye=E("#d6b57e");X.withDefault(I.from(ye));y.withDefault(f.LightMode);Y.withDefault(10);z.getOrCreate().withPrefix("houdini").register(J,ce());const k=document.querySelector("#shape-color input"),M=document.getElementById("shape-color-value"),P=document.getElementById("shape-rounded"),q=document.getElementById("shape-sides"),T=document.getElementById("shape-scale"),$=document.getElementById("shape-position-x"),N=document.getElementById("shape-position-y"),j=document.getElementById("shape-rotation"),D=document.getElementById("shape-radius");k.value=t.color.getValueFor(a);M.innerHTML=t.color.getValueFor(a);k.addEventListener("input",e=>{t.color.setValueFor(a,e.target.value),M.innerHTML=e.target.value});P.checked=t.rounded.getValueFor(a);P.addEventListener("change",e=>{t.rounded.setValueFor(a,e.target.checked)});q.initialValue=t.sides.getValueFor(a).toString();q.addEventListener("input",e=>{t.sides.setValueFor(a,Number(e.target.value))});T.initialValue=t.scale.getValueFor(a).toString();T.addEventListener("input",e=>{t.scale.setValueFor(a,Number(e.target.value))});$.initialValue=t.moveto.getValueFor(a)[0].toString();$.addEventListener("input",e=>{a.getAttribute("move-to")===void 0&&a.setAttribute("move-to","0px,0px");const o=t.moveto.getValueFor(a)[1];t.moveto.setValueFor(a,[`${e.target.value}px`,o])});N.initialValue=t.moveto.getValueFor(a)[1].toString();N.addEventListener("input",e=>{const o=t.moveto.getValueFor(a)[0];t.moveto.setValueFor(a,[o,`${e.target.value}px`])});j.initialValue=t.rotation.getValueFor(a).toString();j.addEventListener("change",e=>{t.rotation.setValueFor(a,Number(e.target.value))});D.initialValue=t.radius.getValueFor(a).toString();D.addEventListener("change",e=>{t.radius.setValueFor(a,Number(e.target.value))});
