import{D as g,c as y,d as v,h as w,F as C,a as l,b as u,S as f,p,n as O,P as h,e as b,f as S,g as k,i as x}from"./vendor.fd35c0d6.js";const L=function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const n of o)if(n.type==="childList")for(const c of n.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&s(c)}).observe(document,{childList:!0,subtree:!0});function e(o){const n={};return o.integrity&&(n.integrity=o.integrity),o.referrerpolicy&&(n.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?n.credentials="include":o.crossorigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(o){if(o.ep)return;o.ep=!0;const n=e(o);fetch(o.href,n)}};L();var F="/assets/polygon-worklet.d4bf10c1.js",D="/assets/masonry-worklet.67bc287d.js",E="/assets/quadtree-worklet.36472c99.js";function P(a,t){const e={};return t.forEach(s=>e[s[0]]=g.create(`${a}-${s[0]}`).withDefault(s[1])),e}const M="polygon",$=[["color","black"],["sides",3],["rotation",0],["radius",0],["rounded",!1],["scale",1],["shadow",JSON.stringify([])],["moveto",[0,0]]],r=P(M,$),I=y`
	${v("inline-block")} :host {
		${r.color};
		${r.sides};
		${r.rotation};
		${r.radius};
		${r.rounded};
		${r.scale};
		${r.shadow};
		${r.moveto};

		background-image: paint(polygon);
		padding: calc(var(--polygon-scale) * 1px);
		transform: translate(var(--polygon-moveto));
	}
`,B=w`
	<template>
		<slot></slot>
	</template>
`;var T=Object.defineProperty,j=Object.getOwnPropertyDescriptor,d=(a,t,e,s)=>{for(var o=s>1?void 0:s?j(t,e):t,n=a.length-1,c;n>=0;n--)(c=a[n])&&(o=(s?c(t,e,o):c(o))||o);return s&&o&&T(t,e,o),o};const A={toView(a){return a.join(",")},fromView(a){return a.split(",").map(t=>`${t.trim()}px`)}};class i extends C{colorChanged(t,e){t!==e&&r.color.setValueFor(this,e)}sidesChanged(t,e){t!==e&&r.sides.setValueFor(this,e)}roundedChanged(t,e){t!==e&&r.rounded.setValueFor(this,e)}radiusChanged(t,e){t!==e&&r.radius.setValueFor(this,e)}rotationChanged(t,e){t!==e&&r.rotation.setValueFor(this,e)}scaleChanged(t,e){t!==e&&r.scale.setValueFor(this,e)}shadowChanged(t,e){t!==e&&r.shadow.setValueFor(this,e)}moveToChanged(t,e){t!==e&&r.moveto.setValueFor(this,e.join(","))}}d([l],i.prototype,"color",2);d([l],i.prototype,"sides",2);d([l({mode:"boolean"})],i.prototype,"rounded",2);d([l],i.prototype,"radius",2);d([l],i.prototype,"rotation",2);d([l],i.prototype,"scale",2);d([l],i.prototype,"shadow",2);d([l({attribute:"move-to",converter:A})],i.prototype,"moveTo",2);const N=i.compose({baseName:"shape",template:B,styles:I});function _(){return(navigator.userAgent.indexOf("Opera")||navigator.userAgent.indexOf("OPR"))!=-1?"Opera":navigator.userAgent.indexOf("Chrome")!=-1?"Chrome":navigator.userAgent.indexOf("Safari")!=-1?"Safari":navigator.userAgent.indexOf("Firefox")!=-1?"Firefox":navigator.userAgent.indexOf("MSIE")!=-1||!!document.documentMode?"Internet Explorer":"Not sure!"}const m=_();m!=="Chrome"&&[document.getElementById("shape-1"),document.getElementById("shape-2"),document.getElementById("shape-3")].forEach((t,e)=>{t.style.backgroundImage=`-moz-element(#paint-${e+1}-polygon) !important`,t.dataset.cssPaint=(e+1).toString()});m!=="Firefox"&&m!=="Chrome"&&(document.getElementById("shapes").innerHTML="Paint worklets using shadow DOM currently only work on chrome canary, edge canary or Firefox");CSS.paintWorklet.addModule(F);CSS.layoutWorklet?(CSS.layoutWorklet.addModule(D),CSS.layoutWorklet.addModule(E)):(document.getElementById("masonry").innerHTML="Layout worklets currently only work on chrome canary or edge canary with experimental platform features enabled.",document.getElementById("quadtree").innerHTML="Layout worklets currently only work on chrome canary or edge canary with experimental platform features enabled.");document.getElementById("mode-toggle").addEventListener("change",a=>{a.target.checked?u.withDefault(f.DarkMode):u.withDefault(f.LightMode)});const q=p("#4d525e");O.withDefault(h.from(q));const H=p("#6ac999");b.withDefault(h.from(H));u.withDefault(f.LightMode);S.withDefault(14);k.getOrCreate().withPrefix("houdini").register(x,N());
